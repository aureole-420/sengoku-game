package yt30_lp28.sengokugame.serverSide;

import java.io.Serializable;
import java.util.HashMap;

import gov.nasa.worldwind.geom.Position;
import gov.nasa.worldwind.layers.RenderableLayer;
import gov.nasa.worldwind.render.BasicShapeAttributes;
import gov.nasa.worldwind.render.Material;
import gov.nasa.worldwind.render.ShapeAttributes;
import gov.nasa.worldwind.render.SurfaceCircle;
import map.MapLayer;

/**
 * The CityIcon is generated by City object. All the visualization of a city on WWJ is designated to CityIcon.
 * @author lp28, yt30
 *
 */
public class CityIcon implements Serializable {

	private static final long serialVersionUID = -4982351369592361124L;

	/**
	 * name of the city
	 */
	private final String _name;

	/**
	 * Latitude of the city (note in city, there is only one Position)
	 */
	private double latitude;
	/**
	 * Longitude of the city
	 */
	private double longitude;

	/**
	 * ownership of the city
	 */
	private int _belongTo; // which team the city belongs to;
	/**
	 * Population of the city
	 */
	private int _population;
	/**
	 * description of the city
	 */
	private String _description; // a typical decription includes: ownership

	/**
	 * Attack range of a warlord when selecting a city -- 1000km
	 */
	private final double attackRange = 1000e3;

	//public CityIcon(String name0, Position position0, int owner, int pop0, String descr0) {
	/**
	 * Constructor of city icon.
	 * @param name0 name of city
	 * @param latitude0 latitude of city
	 * @param longitude0 longitude of city
	 * @param owner owner of city
	 * @param pop0 population of city
	 * @param descr0 description of city
	 */
	public CityIcon(String name0, double latitude0, double longitude0, int owner, int pop0, String descr0) {
		_name = name0;
		//_position = position0;
		latitude = latitude0;
		longitude = longitude0;
		_belongTo = owner;
		_population = pop0;
		_description = descr0;
	}

	/**
	 * getter for city name
	 * @return the cityname
	 */
	public String getName() {
		return _name;
	}
	//	public Position getPosition() { return _position; }

	/**
	 * getter for latitude
	 * @return the latitude
	 */
	public double getLatitude() {
		return latitude;
	}

	/**
	 * getter for longitude
	 * @return the longitude
	 */
	public double getLongitude() {
		return longitude;
	}

	/**
	 * getter for ownership
	 * @return owner of the city
	 */
	public int getOwnership() {
		return _belongTo;
	}

	/**
	 * setter for ownership
	 * @param ownership owner of the city
	 */
	public void setOwnership(int ownership) {
		_belongTo = ownership;
	}

	/**
	 * getter of population
	 * @return population of the city
	 */
	public int getPopulation() {
		return _population;
	}

	/**
	 * setter of population
	 * @param pop population of the city
	 */
	public void setPopulation(int pop) {
		_population = pop;
	}

	/**
	 * getter of description
	 * @return the description of the city
	 */
	public String getDescription() {
		return _description;
	}

	/**
	 * Setter for description
	 * @param desc the description of the city
	 */
	public void setDescription(String desc) {
		_description = desc;
	}

	/**
	 * Add a corresponding annotation on the city;
	 * @param _AnnoLayer the annotation layer of wwj panel
	 */
	public void setToggledAnnotion(MapLayer _AnnoLayer) {
		//_AnnoLayer.addToggleAnnotation(_name, _description, _position);
		_AnnoLayer.addToggleAnnotation(_name, _description, Position.fromDegrees(latitude, longitude));

	}

	/**
	 * Set the surface circle with correct attributes (team colors)
	 * @param _ShapeLayer the shape layer for mapPanel
	 * @param teamColors the team color information
	 */
	public void setCircleShape(RenderableLayer _ShapeLayer, HashMap<Integer, Material> teamColors) {
		SurfaceCircle cityCircle = new SurfaceCircle(Position.fromDegrees(latitude, longitude), getRadius(_population));
		_ShapeLayer.addRenderable(cityCircle);
		// set color
		ShapeAttributes attr = cityCircle.getAttributes();
		if (attr == null) {
			attr = new BasicShapeAttributes();
			attr.setInteriorMaterial(teamColors.get(_belongTo));
		}
		cityCircle.setAttributes(attr);
	}

	/**
	 * Draw the attack range circle on the map
	 * @param _RangeLayer The range layer of map panel (wwj)
	 */
	public void drawAttackRangeCircle(RenderableLayer _RangeLayer) {
		SurfaceCircle rangeCircle = new SurfaceCircle(Position.fromDegrees(latitude, longitude), attackRange);
		_RangeLayer.addRenderable(rangeCircle);
		ShapeAttributes attr = rangeCircle.getAttributes();
		if (attr == null) {
			attr = new BasicShapeAttributes();
			attr.setOutlineOpacity(1);
			attr.setDrawInterior(false);
			attr.setOutlineMaterial(Material.RED);
			attr.setOutlineWidth(5);
		}
		rangeCircle.setAttributes(attr);
	}

	/**
	 * compute the radius of surface circle according to the population.
	 * @param pop The population of the city
	 * @return the radius of the surface circle
	 */
	private double getRadius(int pop) { // compute radius of Surface Circle according to the population
		return 30e3 + (20e3) * Math.sqrt(pop / 100.0);
	}

	/**
	 * This method is used to update the CityIcon using another Icon.
	 * The client side will call this method, when they receive newCityIcon from server.
	 * @param another another city
	 */
	public void updateInformation(CityIcon another) {
		this.setPopulation(another.getPopulation());
		this.setOwnership(another.getOwnership());
		this.setDescription(another.getDescription());
	}

	@Override
	/**
	 * Overriden toString method;
	 */
	public String toString() {
		return _name;
	}

	/**
	 * helper function for debugging;
	 * Print the city attributes;
	 */
	public void printCityIcon() {
		System.out.println("City: " + _name);
		System.out.println("Ownership: " + _belongTo);
		System.out.println("Population: " + _population);
		System.out.println("Description: " + _description);
		System.out.println("");
	}

}
